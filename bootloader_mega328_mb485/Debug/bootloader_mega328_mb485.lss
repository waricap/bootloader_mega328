
bootloader_mega328_mb485.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000840  000008d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021d  00800102  00800102  000008d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa0  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c5  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000989  00000000  00000000  0000239d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00002d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008da  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000731  00000000  00000000  000038ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003ffb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_18>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_19>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 02 01 	call	0x204	; 0x204 <main>
  9e:	0c 94 1e 04 	jmp	0x83c	; 0x83c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:
uint16_t i_max_flash = SPM_PAGESIZE/2;
							
// -----------------------INTERRUPT ---------------------------------------- //
// -----------------------INTERRUPT ---------------------------------------- //
ISR (USART_TX_vect)  
{  PORTC &= ~( 1<< 3); } // перевод UART в режим приема
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	28 e2       	ldi	r18, 0x28	; 40
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	27 7f       	andi	r18, 0xF7	; 247
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
  d8:	00 00       	nop
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	3f 91       	pop	r19
  e8:	2f 91       	pop	r18
  ea:	0f 90       	pop	r0
  ec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_19>:

ISR (USART_UDRE_vect)
{ xMBRTUTransmitFSM();}
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	0e 94 85 03 	call	0x70a	; 0x70a <xMBRTUTransmitFSM>
 126:	00 00       	nop
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_18>:

ISR (USART_RX_vect)
{ xMBRTUReceiveFSM();}
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	0e 94 3c 03 	call	0x678	; 0x678 <xMBRTUReceiveFSM>
 180:	00 00       	nop
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_11>:

ISR( TIMER1_COMPA_vect)
{ ( void )xMBRTUTimerT35Expired();}
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	0e 94 bb 03 	call	0x776	; 0x776 <xMBRTUTimerT35Expired>
 1da:	00 00       	nop
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <main>:
//	TCCR2B |= (1 << CS20) | (1 << CS21) | (1 << CS22); // | (1 << WGM22) ; // frequency F_CPU/1024
//	TIMSK2 |= (1<< TOIE2);
//}

int main(void) 
{ 	
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
	cli();//  заблокируем прерывания    cli()   - там такой дефайн есть
 20c:	f8 94       	cli
	/* Enable change of Interrupt Vectors */
	MCUCR = (1<<IVCE);
 20e:	85 e5       	ldi	r24, 0x55	; 85
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
	/* Move interrupts to boot Flash section */
	MCUCR = (1<<IVSEL);	
 218:	85 e5       	ldi	r24, 0x55	; 85
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	22 e0       	ldi	r18, 0x02	; 2
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
	sei();  // вернем на место прерывания     sei()   - там такой дефайн есть
 222:	78 94       	sei
	 // read-modify-write to preserve other configured bits
	// _PROTECTED_WRITE(CPUINT.CTRLA, (CPUINT.CTRLA | CPUINT_IVSEL_bm));
	 //Enable global interrupts

	 
		DDRB  = 0; // везде назначаем входа,
 224:	84 e2       	ldi	r24, 0x24	; 36
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	10 82       	st	Z, r1
		PORTB = 0xFF; // подт¤жка всех входов к плюсу
 22c:	85 e2       	ldi	r24, 0x25	; 37
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
		//PORTC = 0xFF; // подт¤жка всех входов к плюсу
		//DDRD  = 0; // везде назначаем входа,
		//PORTD = 0xFF ; // подт¤жка всех входов к плюсу

		// нo некоторые будут выходами, назначаем:
		DDRC |=(1<<3);		//	pin.26 mega328.PC3   выход для переключени¤  MAX485
 236:	87 e2       	ldi	r24, 0x27	; 39
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	27 e2       	ldi	r18, 0x27	; 39
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	20 81       	ld	r18, Z
 242:	28 60       	ori	r18, 0x08	; 8
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
		PORTC &= ~( 1<< 3); //	pin.26 mega328.PC3     =0 -Read_max485
 248:	88 e2       	ldi	r24, 0x28	; 40
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	28 e2       	ldi	r18, 0x28	; 40
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	20 81       	ld	r18, Z
 254:	27 7f       	andi	r18, 0xF7	; 247
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18

DDRC |=(1<<4);		//	pin.27 mega328.PC4   выход - тест  старта
 25a:	87 e2       	ldi	r24, 0x27	; 39
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	27 e2       	ldi	r18, 0x27	; 39
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	f9 01       	movw	r30, r18
 264:	20 81       	ld	r18, Z
 266:	20 61       	ori	r18, 0x10	; 16
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
PORTC &= ~( 1<< 4);
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	28 e2       	ldi	r18, 0x28	; 40
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	2f 7e       	andi	r18, 0xEF	; 239
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
		DDRC |=(1<<5);		//	pin.27 mega328.PC4   выход - тест  старта
 27e:	87 e2       	ldi	r24, 0x27	; 39
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	27 e2       	ldi	r18, 0x27	; 39
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	20 81       	ld	r18, Z
 28a:	20 62       	ori	r18, 0x20	; 32
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
//		sei();
	


		// ====== setup ModBUS ===================== setup ModBUS ========= setup ModBUS =========================================//
		ucMBAddress = 7 ;  // такой адрес будет у всех плат УЗ-ванна
 290:	87 e0       	ldi	r24, 0x07	; 7
 292:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <ucMBAddress>
				    // настроить UART// скорость 9600, исключительно, потому что предполагается ещё на шине PHASER
					cli();//  заблокируем прерывания    cli()   - там такой дефайн есть
 296:	f8 94       	cli
				    UCSR0C|=  (1<<UCSZ01) | (1<<UCSZ00);  //  8бит  данных// длина данных и без вариантов  8 bit i NO variant
 298:	82 ec       	ldi	r24, 0xC2	; 194
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	22 ec       	ldi	r18, 0xC2	; 194
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	26 60       	ori	r18, 0x06	; 6
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
				    UCSR0A |= (1<<U2X0);  // это будет  асинхронный  UART
 2aa:	80 ec       	ldi	r24, 0xC0	; 192
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	20 ec       	ldi	r18, 0xC0	; 192
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	f9 01       	movw	r30, r18
 2b4:	20 81       	ld	r18, Z
 2b6:	22 60       	ori	r18, 0x02	; 2
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
						UBRR0L=207;   // 2значения,  определяют 9600  при 16 МГц			
 2bc:	84 ec       	ldi	r24, 0xC4	; 196
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	2f ec       	ldi	r18, 0xCF	; 207
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
						//UBRR0L=103;   // 2значения,  определяют 19200  при 16 МГц
						//UBRR0L=51;		// 2значения,  определяют 38400  при 16 МГц
				    UBRR0H = 0;
 2c6:	85 ec       	ldi	r24, 0xC5	; 197
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	10 82       	st	Z, r1
				    UCSR0B |= (1<<RXEN0);// разрешаем прием
 2ce:	81 ec       	ldi	r24, 0xC1	; 193
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	21 ec       	ldi	r18, 0xC1	; 193
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	f9 01       	movw	r30, r18
 2d8:	20 81       	ld	r18, Z
 2da:	20 61       	ori	r18, 0x10	; 16
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
				    UCSR0B &= ~((1<< RXEN0) | (1<< RXCIE0));
 2e0:	81 ec       	ldi	r24, 0xC1	; 193
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	21 ec       	ldi	r18, 0xC1	; 193
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	f9 01       	movw	r30, r18
 2ea:	20 81       	ld	r18, Z
 2ec:	2f 76       	andi	r18, 0x6F	; 111
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
				    UCSR0B &= ~(1<< UDRE0 );
 2f2:	81 ec       	ldi	r24, 0xC1	; 193
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	21 ec       	ldi	r18, 0xC1	; 193
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	f9 01       	movw	r30, r18
 2fc:	20 81       	ld	r18, Z
 2fe:	2f 7d       	andi	r18, 0xDF	; 223
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
						// настроить таймер модбуса
						usTimerOCRADelta = ( MB_TIMER_TICKS * 40 ) / ( MB_50US_TICKS );  // 40 = таймер  при 9600  при19200  частота 16 МГц
 304:	8f e1       	ldi	r24, 0x1F	; 31
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <usTimerOCRADelta+0x1>
 30c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <usTimerOCRADelta>
						//usTimerOCRADelta = ( MB_TIMER_TICKS * 35 ) / ( MB_50US_TICKS );  // 35 = таймер  при 38400  частота 16 МГц
				    TCCR1A = 0x00;
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	fc 01       	movw	r30, r24
 316:	10 82       	st	Z, r1
				    TCCR1B = 0x00;
 318:	81 e8       	ldi	r24, 0x81	; 129
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	fc 01       	movw	r30, r24
 31e:	10 82       	st	Z, r1
				    TCCR1C = 0x00;
 320:	82 e8       	ldi	r24, 0x82	; 130
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	fc 01       	movw	r30, r24
 326:	10 82       	st	Z, r1
				    TCCR1B &= ~((1<< CS12) | (1<< CS10));// Disable the timer.
 328:	81 e8       	ldi	r24, 0x81	; 129
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	21 e8       	ldi	r18, 0x81	; 129
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	f9 01       	movw	r30, r18
 332:	20 81       	ld	r18, Z
 334:	2a 7f       	andi	r18, 0xFA	; 250
 336:	fc 01       	movw	r30, r24
 338:	20 83       	st	Z, r18
				    TIMSK1 &= ~(1<< OCIE1A);// Disable the output compare interrupts for channel A/B.
 33a:	8f e6       	ldi	r24, 0x6F	; 111
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	2f e6       	ldi	r18, 0x6F	; 111
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	f9 01       	movw	r30, r18
 344:	20 81       	ld	r18, Z
 346:	2d 7f       	andi	r18, 0xFD	; 253
 348:	fc 01       	movw	r30, r24
 34a:	20 83       	st	Z, r18
				    TIFR1 |= (1<< OCF1A ) ;// Clear output compare flags for channel A/B.
 34c:	86 e3       	ldi	r24, 0x36	; 54
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	26 e3       	ldi	r18, 0x36	; 54
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	f9 01       	movw	r30, r18
 356:	20 81       	ld	r18, Z
 358:	22 60       	ori	r18, 0x02	; 2
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
			// eMBRTUStart();// Enable the Modbus Protocol Stack.
			vMBPortSerialEnable( TRUE, FALSE ); // и так уже сделано, выше
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vMBPortSerialEnable>
			vMBPortTimersEnable(  );
 366:	0e 94 01 04 	call	0x802	; 0x802 <vMBPortTimersEnable>
		sei();  // вернем на место прерывания     sei()   - там такой дефайн есть
 36a:	78 94       	sei
		
		// ============ сторожевой таймер должен быть ============================== //
		wdt_reset(); // сброс сторожевого таймера
 36c:	a8 95       	wdr
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 36e:	86 e0       	ldi	r24, 0x06	; 6
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	88 70       	andi	r24, 0x08	; 8
 374:	99 27       	eor	r25, r25
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 376:	89 2b       	or	r24, r25
 378:	11 f0       	breq	.+4      	; 0x37e <main+0x17a>
 37a:	88 e2       	ldi	r24, 0x28	; 40
 37c:	01 c0       	rjmp	.+2      	; 0x380 <main+0x17c>
 37e:	88 e0       	ldi	r24, 0x08	; 8
 380:	96 e0       	ldi	r25, 0x06	; 6
 382:	97 70       	andi	r25, 0x07	; 7
 384:	89 2b       	or	r24, r25
 386:	98 2f       	mov	r25, r24
 388:	88 e1       	ldi	r24, 0x18	; 24
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	a8 95       	wdr
 390:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 394:	0f be       	out	0x3f, r0	; 63
 396:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
// __SPM_REGis в пространстве ввода-вывода, доступном с помощью более коротких инструкций "in" и "out" - поскольку загрузчик имеет ограниченный размер, 
// это может быть важной оптимизацией.		


// ============================================== TEST ========================================
				for (i=0; i<64; i++) 
 39a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <i+0x1>
 39e:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <i>
 3a2:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 3a6:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 3aa:	80 34       	cpi	r24, 0x40	; 64
 3ac:	91 05       	cpc	r25, r1
 3ae:	18 f5       	brcc	.+70     	; 0x3f6 <main+0x1f2>
				{
					usReg_HOLDING_Buf[5+i] = 256*i + i;
 3b0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 3b4:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 3b8:	05 96       	adiw	r24, 0x05	; 5
 3ba:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <i>
 3be:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <i+0x1>
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	51 e0       	ldi	r21, 0x01	; 1
 3c6:	64 9f       	mul	r22, r20
 3c8:	90 01       	movw	r18, r0
 3ca:	65 9f       	mul	r22, r21
 3cc:	30 0d       	add	r19, r0
 3ce:	74 9f       	mul	r23, r20
 3d0:	30 0d       	add	r19, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	8e 5f       	subi	r24, 0xFE	; 254
 3da:	9e 4f       	sbci	r25, 0xFE	; 254
 3dc:	fc 01       	movw	r30, r24
 3de:	31 83       	std	Z+1, r19	; 0x01
 3e0:	20 83       	st	Z, r18
// __SPM_REGis в пространстве ввода-вывода, доступном с помощью более коротких инструкций "in" и "out" - поскольку загрузчик имеет ограниченный размер, 
// это может быть важной оптимизацией.		


// ============================================== TEST ========================================
				for (i=0; i<64; i++) 
 3e2:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 3e6:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <i+0x1>
 3f0:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <i>
 3f4:	d6 cf       	rjmp	.-84     	; 0x3a2 <main+0x19e>
				//usReg_HOLDING_Buf[6]=1019;	
				//usReg_HOLDING_Buf[7]=7;	
				// ...
				// usReg_HOLDING_Buf[67] =67;	// LW166
				 //usReg_HOLDING_Buf[68] =68;	// LW167
				 usReg_HOLDING_Buf[69] =1;	// это уже 65-е слово,  передается инфа, номер страницы +1, а на странице 64 WORD == 128 BYTE
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x8b>
 3fe:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end+0x8a>
    while (1) 
    {
		// ====== проверим ModBUS ===================== проверим ModBUS ========= проверим ModBUS =========================================//
// TEST  TEST		if ( MB_ENOERR == eMBPoll() )
			{			
				wdt_reset();  // сброс сторожевого таймера, если запрос модбуса NO ошибкой
 402:	a8 95       	wdr
				usReg_HOLDING_Buf[1]++;		// LW100
 404:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
 408:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x3>
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x3>
 412:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
				usReg_HOLDING_Buf[2]=3;		// номер  страница, которую надо записать во флеш, этот регистр читает мастер, и поэтому знает и потом пришлет что надо, но потом.
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x5>
 41e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x4>
				usReg_HOLDING_Buf[3] = usReg_HOLDING_Buf[5];		// LW102
 422:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0xa>
 426:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0xb>
 42a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x7>
 42e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x6>
				for (i=5; i<72; i++) 
 432:	85 e0       	ldi	r24, 0x05	; 5
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <i+0x1>
 43a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <i>
 43e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 442:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 446:	88 34       	cpi	r24, 0x48	; 72
 448:	91 05       	cpc	r25, r1
 44a:	f8 f4       	brcc	.+62     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
				{
					if (usReg_HOLDING_Buf[i] >0) { usReg_HOLDING_Buf[4]=i; }
 44c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 450:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	8e 5f       	subi	r24, 0xFE	; 254
 45a:	9e 4f       	sbci	r25, 0xFE	; 254
 45c:	fc 01       	movw	r30, r24
 45e:	80 81       	ld	r24, Z
 460:	91 81       	ldd	r25, Z+1	; 0x01
 462:	89 2b       	or	r24, r25
 464:	41 f0       	breq	.+16     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 466:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 46a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 46e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x9>
 472:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end+0x8>
			{			
				wdt_reset();  // сброс сторожевого таймера, если запрос модбуса NO ошибкой
				usReg_HOLDING_Buf[1]++;		// LW100
				usReg_HOLDING_Buf[2]=3;		// номер  страница, которую надо записать во флеш, этот регистр читает мастер, и поэтому знает и потом пришлет что надо, но потом.
				usReg_HOLDING_Buf[3] = usReg_HOLDING_Buf[5];		// LW102
				for (i=5; i<72; i++) 
 476:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 47a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <i+0x1>
 484:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <i>
 488:	da cf       	rjmp	.-76     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
				// usReg_HOLDING_Buf[68];	// LW167
				// usReg_HOLDING_Buf[69];	// это уже 65-е слово,  передается инфа, номер страницы +1, а на странице 64 WORD == 128 BYTE

				// ===============	input_button_US;		// pin18 => PB4 => нажата кнопка ==0, отпущена ==1 (подвес +5)   if ((PINB & (1 << 4)) > 0)
				
				if ((usReg_HOLDING_Buf[69] >= 0x0FFF) | ((PINB & (1 << 4)) > 0) & (usReg_HOLDING_Buf[69] ==0)) //| (usReg_HOLDING_Buf[69] < 7))	//  usReg_HOLDING_Buf[69] номер страницы +7, Передатчик, когда закончатся данные, поднимет номер страницы выше 255 и ОК
 48a:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end+0x8a>
 48e:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x8b>
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	8f 3f       	cpi	r24, 0xFF	; 255
 496:	9f 40       	sbci	r25, 0x0F	; 15
 498:	08 f4       	brcc	.+2      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	22 2f       	mov	r18, r18
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	83 e2       	ldi	r24, 0x23	; 35
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	fc 01       	movw	r30, r24
 4a6:	80 81       	ld	r24, Z
 4a8:	88 2f       	mov	r24, r24
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	80 71       	andi	r24, 0x10	; 16
 4ae:	99 27       	eor	r25, r25
 4b0:	51 e0       	ldi	r21, 0x01	; 1
 4b2:	18 16       	cp	r1, r24
 4b4:	19 06       	cpc	r1, r25
 4b6:	0c f0       	brlt	.+2      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end+0x8a>
 4be:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x8b>
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	89 2b       	or	r24, r25
 4c6:	09 f0       	breq	.+2      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	85 2f       	mov	r24, r21
 4cc:	84 23       	and	r24, r20
 4ce:	88 2f       	mov	r24, r24
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	82 2b       	or	r24, r18
 4d4:	93 2b       	or	r25, r19
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	89 2b       	or	r24, r25
 4da:	09 f4       	brne	.+2      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	22 23       	and	r18, r18
 4e0:	31 f0       	breq	.+12     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
					{ 
						boot_rww_enable ();		// Снова включите RWW-раздел. Нам это нужно, если мы хотим вернуться к приложению после загрузки.
 4e2:	81 e1       	ldi	r24, 0x11	; 17
 4e4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
 4e8:	e8 95       	spm
						asm("jmp 0x0000"); // переход к основной прг
 4ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
					}
				if (usReg_HOLDING_Buf[69] > 0)
 4ee:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end+0x8a>
 4f2:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x8b>
 4f6:	89 2b       	or	r24, r25
 4f8:	09 f4       	brne	.+2      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fa:	83 cf       	rjmp	.-250    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
				{
					page = (usReg_HOLDING_Buf[69]-1 + 3);	// номер страницы, который записан в конце пришедшего пекета данных
 4fc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end+0x8a>
 500:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x8b>
 504:	02 96       	adiw	r24, 0x02	; 2
 506:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <page+0x1>
 50a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <page>
					// ============================ write boot ========================== //
					if (page == usReg_HOLDING_Buf[2])
 50e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end+0x4>
 512:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x5>
 516:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <page>
 51a:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <page+0x1>
 51e:	28 17       	cp	r18, r24
 520:	39 07       	cpc	r19, r25
 522:	09 f0       	breq	.+2      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 524:	6e cf       	rjmp	.-292    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
					{
						cli();		// отключаем прерывания
 526:	f8 94       	cli
							boot_page_erase(page);		// стереть память
 528:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <page>
 52c:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <page+0x1>
 530:	23 e0       	ldi	r18, 0x03	; 3
 532:	fc 01       	movw	r30, r24
 534:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
 538:	e8 95       	spm
							boot_spm_busy_wait ();      // wait, пока память не будет стерта.
 53a:	87 e5       	ldi	r24, 0x57	; 87
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	fc 01       	movw	r30, r24
 540:	80 81       	ld	r24, Z
 542:	88 2f       	mov	r24, r24
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	81 70       	andi	r24, 0x01	; 1
 548:	99 27       	eor	r25, r25
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	89 2b       	or	r24, r25
 54e:	09 f4       	brne	.+2      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	22 23       	and	r18, r18
 554:	09 f0       	breq	.+2      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 556:	f1 cf       	rjmp	.-30     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
							for (i=0; i<i_max_flash; i++) // SPM_PAGESIZE  128 байт  == 64 слова
 558:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <i+0x1>
 55c:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <i>
 560:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <i>
 564:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <i+0x1>
 568:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 56c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 570:	28 17       	cp	r18, r24
 572:	39 07       	cpc	r19, r25
 574:	08 f0       	brcs	.+2      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 576:	44 c0       	rjmp	.+136    	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
							{
								address = i_max_flash*2*page + i*2;
 578:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 57c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 580:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <page>
 584:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <page+0x1>
 588:	48 9f       	mul	r20, r24
 58a:	90 01       	movw	r18, r0
 58c:	49 9f       	mul	r20, r25
 58e:	30 0d       	add	r19, r0
 590:	58 9f       	mul	r21, r24
 592:	30 0d       	add	r19, r0
 594:	11 24       	eor	r1, r1
 596:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 59a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 59e:	82 0f       	add	r24, r18
 5a0:	93 1f       	adc	r25, r19
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <address+0x1>
 5aa:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <address>
								data	= usReg_HOLDING_Buf[i+5];
 5ae:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 5b2:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 5b6:	05 96       	adiw	r24, 0x05	; 5
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	8e 5f       	subi	r24, 0xFE	; 254
 5be:	9e 4f       	sbci	r25, 0xFE	; 254
 5c0:	fc 01       	movw	r30, r24
 5c2:	80 81       	ld	r24, Z
 5c4:	91 81       	ldd	r25, Z+1	; 0x01
 5c6:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <data+0x1>
 5ca:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <data>
								boot_page_fill (address, data);  // заполняем буфер для записи,  page - номер страницы во flash
 5ce:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <address>
 5d2:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <address+0x1>
 5d6:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <data>
 5da:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <data+0x1>
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	fc 01       	movw	r30, r24
 5e2:	09 01       	movw	r0, r18
 5e4:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
 5e8:	e8 95       	spm
 5ea:	11 24       	eor	r1, r1
					if (page == usReg_HOLDING_Buf[2])
					{
						cli();		// отключаем прерывания
							boot_page_erase(page);		// стереть память
							boot_spm_busy_wait ();      // wait, пока память не будет стерта.
							for (i=0; i<i_max_flash; i++) // SPM_PAGESIZE  128 байт  == 64 слова
 5ec:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 5f0:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <i+0x1>
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <i+0x1>
 5fa:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <i>
 5fe:	b0 cf       	rjmp	.-160    	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
							{
								address = i_max_flash*2*page + i*2;
								data	= usReg_HOLDING_Buf[i+5];
								boot_page_fill (address, data);  // заполняем буфер для записи,  page - номер страницы во flash
							}
							boot_page_write (page);	// записать данные из буфера на флэш-страницу.
 600:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <page>
 604:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <page+0x1>
 608:	25 e0       	ldi	r18, 0x05	; 5
 60a:	fc 01       	movw	r30, r24
 60c:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
 610:	e8 95       	spm
							boot_spm_busy_wait();   // wait, пока память не будет записана.
 612:	87 e5       	ldi	r24, 0x57	; 87
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	fc 01       	movw	r30, r24
 618:	80 81       	ld	r24, Z
 61a:	88 2f       	mov	r24, r24
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	81 70       	andi	r24, 0x01	; 1
 620:	99 27       	eor	r25, r25
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	89 2b       	or	r24, r25
 626:	09 f4       	brne	.+2      	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	22 23       	and	r18, r18
 62c:	09 f0       	breq	.+2      	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
 62e:	f1 cf       	rjmp	.-30     	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
						sei();						
 630:	78 94       	sei
						usReg_HOLDING_Buf[2] = page +1; // запросим следующую страницу
 632:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <page>
 636:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <page+0x1>
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x5>
 640:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x4>
						if((PORTC & (1 << 3)) == 0) // только если идет прием, меняем значение порта, если передача - то прокидываем
 644:	88 e2       	ldi	r24, 0x28	; 40
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	fc 01       	movw	r30, r24
 64a:	80 81       	ld	r24, Z
 64c:	88 2f       	mov	r24, r24
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	88 70       	andi	r24, 0x08	; 8
 652:	99 27       	eor	r25, r25
 654:	21 e0       	ldi	r18, 0x01	; 1
 656:	89 2b       	or	r24, r25
 658:	09 f0       	breq	.+2      	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
 65a:	20 e0       	ldi	r18, 0x00	; 0
 65c:	22 23       	and	r18, r18
 65e:	09 f4       	brne	.+2      	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
 660:	d0 ce       	rjmp	.-608    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
							{ PORTC ^= ( 1<< 4);  } // что бы случайно не помешать работе приемапередачи UART
 662:	88 e2       	ldi	r24, 0x28	; 40
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	28 e2       	ldi	r18, 0x28	; 40
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	f9 01       	movw	r30, r18
 66c:	30 81       	ld	r19, Z
 66e:	20 e1       	ldi	r18, 0x10	; 16
 670:	23 27       	eor	r18, r19
 672:	fc 01       	movw	r30, r24
 674:	20 83       	st	Z, r18



// ========== MAIN цикл цикл =========================== MAIN цикл цикл ========== MAIN цикл цикл ========== MAIN цикл цикл ==================================================//
// ========== MAIN цикл цикл =========================== MAIN цикл цикл ========== MAIN цикл цикл ========== MAIN цикл цикл ==================================================//
    while (1) 
 676:	c5 ce       	rjmp	.-630    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>

00000678 <xMBRTUReceiveFSM>:
 678:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 67c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <eRcvState>
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	61 f0       	breq	.+24     	; 0x69c <xMBRTUReceiveFSM+0x24>
 684:	28 f0       	brcs	.+10     	; 0x690 <xMBRTUReceiveFSM+0x18>
 686:	82 30       	cpi	r24, 0x02	; 2
 688:	11 f1       	breq	.+68     	; 0x6ce <xMBRTUReceiveFSM+0x56>
 68a:	83 30       	cpi	r24, 0x03	; 3
 68c:	21 f0       	breq	.+8      	; 0x696 <xMBRTUReceiveFSM+0x1e>
 68e:	08 95       	ret
 690:	0e 94 01 04 	call	0x802	; 0x802 <vMBPortTimersEnable>
 694:	08 95       	ret
 696:	0e 94 01 04 	call	0x802	; 0x802 <vMBPortTimersEnable>
 69a:	08 95       	ret
 69c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <usRcvBufferPos+0x1>
 6a0:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <usRcvBufferPos>
 6a4:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <usRcvBufferPos>
 6a8:	30 91 16 02 	lds	r19, 0x0216	; 0x800216 <usRcvBufferPos+0x1>
 6ac:	a9 01       	movw	r20, r18
 6ae:	4f 5f       	subi	r20, 0xFF	; 255
 6b0:	5f 4f       	sbci	r21, 0xFF	; 255
 6b2:	50 93 16 02 	sts	0x0216, r21	; 0x800216 <usRcvBufferPos+0x1>
 6b6:	40 93 15 02 	sts	0x0215, r20	; 0x800215 <usRcvBufferPos>
 6ba:	f9 01       	movw	r30, r18
 6bc:	e1 5e       	subi	r30, 0xE1	; 225
 6be:	fd 4f       	sbci	r31, 0xFD	; 253
 6c0:	90 83       	st	Z, r25
 6c2:	82 e0       	ldi	r24, 0x02	; 2
 6c4:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <eRcvState>
 6c8:	0e 94 01 04 	call	0x802	; 0x802 <vMBPortTimersEnable>
 6cc:	08 95       	ret
 6ce:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <usRcvBufferPos>
 6d2:	30 91 16 02 	lds	r19, 0x0216	; 0x800216 <usRcvBufferPos+0x1>
 6d6:	2f 3f       	cpi	r18, 0xFF	; 255
 6d8:	31 05       	cpc	r19, r1
 6da:	09 f0       	breq	.+2      	; 0x6de <xMBRTUReceiveFSM+0x66>
 6dc:	80 f4       	brcc	.+32     	; 0x6fe <xMBRTUReceiveFSM+0x86>
 6de:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <usRcvBufferPos>
 6e2:	30 91 16 02 	lds	r19, 0x0216	; 0x800216 <usRcvBufferPos+0x1>
 6e6:	a9 01       	movw	r20, r18
 6e8:	4f 5f       	subi	r20, 0xFF	; 255
 6ea:	5f 4f       	sbci	r21, 0xFF	; 255
 6ec:	50 93 16 02 	sts	0x0216, r21	; 0x800216 <usRcvBufferPos+0x1>
 6f0:	40 93 15 02 	sts	0x0215, r20	; 0x800215 <usRcvBufferPos>
 6f4:	f9 01       	movw	r30, r18
 6f6:	e1 5e       	subi	r30, 0xE1	; 225
 6f8:	fd 4f       	sbci	r31, 0xFD	; 253
 6fa:	90 83       	st	Z, r25
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <xMBRTUReceiveFSM+0x8c>
 6fe:	83 e0       	ldi	r24, 0x03	; 3
 700:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <eRcvState>
 704:	0e 94 01 04 	call	0x802	; 0x802 <vMBPortTimersEnable>
 708:	08 95       	ret

0000070a <xMBRTUTransmitFSM>:
 70a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <eSndState>
 70e:	88 23       	and	r24, r24
 710:	19 f0       	breq	.+6      	; 0x718 <xMBRTUTransmitFSM+0xe>
 712:	81 30       	cpi	r24, 0x01	; 1
 714:	31 f0       	breq	.+12     	; 0x722 <xMBRTUTransmitFSM+0x18>
 716:	08 95       	ret
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vMBPortSerialEnable>
 720:	08 95       	ret
 722:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <usSndBufferCount>
 726:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <usSndBufferCount+0x1>
 72a:	89 2b       	or	r24, r25
 72c:	d1 f0       	breq	.+52     	; 0x762 <xMBRTUTransmitFSM+0x58>
 72e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <pucSndBufferCur>
 732:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <pucSndBufferCur+0x1>
 736:	80 81       	ld	r24, Z
 738:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 73c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <pucSndBufferCur>
 740:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <pucSndBufferCur+0x1>
 744:	01 96       	adiw	r24, 0x01	; 1
 746:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <pucSndBufferCur+0x1>
 74a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <pucSndBufferCur>
 74e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <usSndBufferCount>
 752:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <usSndBufferCount+0x1>
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <usSndBufferCount+0x1>
 75c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <usSndBufferCount>
 760:	08 95       	ret
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	0e 94 da 03 	call	0x7b4	; 0x7b4 <xMBPortEventPost>
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vMBPortSerialEnable>
 770:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <eSndState>
 774:	08 95       	ret

00000776 <xMBRTUTimerT35Expired>:
 776:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <eRcvState>
 77a:	88 23       	and	r24, r24
 77c:	19 f0       	breq	.+6      	; 0x784 <xMBRTUTimerT35Expired+0xe>
 77e:	82 30       	cpi	r24, 0x02	; 2
 780:	29 f0       	breq	.+10     	; 0x78c <xMBRTUTimerT35Expired+0x16>
 782:	07 c0       	rjmp	.+14     	; 0x792 <xMBRTUTimerT35Expired+0x1c>
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	0e 94 da 03 	call	0x7b4	; 0x7b4 <xMBPortEventPost>
 78a:	03 c0       	rjmp	.+6      	; 0x792 <xMBRTUTimerT35Expired+0x1c>
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <xMBPortEventPost>
 792:	e1 e8       	ldi	r30, 0x81	; 129
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	8a 7f       	andi	r24, 0xFA	; 250
 79a:	80 83       	st	Z, r24
 79c:	ef e6       	ldi	r30, 0x6F	; 111
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	8d 7f       	andi	r24, 0xFD	; 253
 7a4:	80 83       	st	Z, r24
 7a6:	86 b3       	in	r24, 0x16	; 22
 7a8:	82 60       	ori	r24, 0x02	; 2
 7aa:	86 bb       	out	0x16, r24	; 22
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <eRcvState>
 7b2:	08 95       	ret

000007b4 <xMBPortEventPost>:
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <xEventInQueue>
 7ba:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <eQueuedEvent>
 7be:	08 95       	ret

000007c0 <vMBPortSerialEnable>:
 7c0:	e1 ec       	ldi	r30, 0xC1	; 193
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	90 81       	ld	r25, Z
 7c6:	98 64       	ori	r25, 0x48	; 72
 7c8:	90 83       	st	Z, r25
 7ca:	88 23       	and	r24, r24
 7cc:	21 f0       	breq	.+8      	; 0x7d6 <vMBPortSerialEnable+0x16>
 7ce:	80 81       	ld	r24, Z
 7d0:	80 69       	ori	r24, 0x90	; 144
 7d2:	80 83       	st	Z, r24
 7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <vMBPortSerialEnable+0x20>
 7d6:	e1 ec       	ldi	r30, 0xC1	; 193
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	8f 76       	andi	r24, 0x6F	; 111
 7de:	80 83       	st	Z, r24
 7e0:	66 23       	and	r22, r22
 7e2:	49 f0       	breq	.+18     	; 0x7f6 <vMBPortSerialEnable+0x36>
 7e4:	e1 ec       	ldi	r30, 0xC1	; 193
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	88 62       	ori	r24, 0x28	; 40
 7ec:	80 83       	st	Z, r24
 7ee:	88 b1       	in	r24, 0x08	; 8
 7f0:	88 60       	ori	r24, 0x08	; 8
 7f2:	88 b9       	out	0x08, r24	; 8
 7f4:	08 95       	ret
 7f6:	e1 ec       	ldi	r30, 0xC1	; 193
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	8f 7d       	andi	r24, 0xDF	; 223
 7fe:	80 83       	st	Z, r24
 800:	08 95       	ret

00000802 <vMBPortTimersEnable>:
 802:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 806:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 80a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <usTimerOCRADelta>
 80e:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <usTimerOCRADelta+0x1>
 812:	89 2b       	or	r24, r25
 814:	69 f0       	breq	.+26     	; 0x830 <vMBPortTimersEnable+0x2e>
 816:	ef e6       	ldi	r30, 0x6F	; 111
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	82 60       	ori	r24, 0x02	; 2
 81e:	80 83       	st	Z, r24
 820:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <usTimerOCRADelta>
 824:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <usTimerOCRADelta+0x1>
 828:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 82c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 830:	e1 e8       	ldi	r30, 0x81	; 129
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	85 60       	ori	r24, 0x05	; 5
 838:	80 83       	st	Z, r24
 83a:	08 95       	ret

0000083c <_exit>:
 83c:	f8 94       	cli

0000083e <__stop_program>:
 83e:	ff cf       	rjmp	.-2      	; 0x83e <__stop_program>
